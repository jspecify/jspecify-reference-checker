#!/bin/sh
# A quick and easy way to run the reference checker on some standalone code.
# If you set the CLASSPATH environment variable it will use it, adding its own entries to that list.
# To integrate the checker into a more complex build, reading the below should give you what you need to know.

dir=$(dirname $0)
jspecify="${dir}/../jspecify/build/libs/jspecify-0.0.0-SNAPSHOT.jar"
if [ ! -e "${jspecify}" ]; then
  version=0.3.0
  jspecify="${dir}/build/jspecify-${version}.jar"
  if [ ! -e "${jspecify}" ]; then
    echo "Downloading $(basename "${jspecify}") from Maven central"
    mvn -q org.apache.maven.plugins:maven-dependency-plugin:3.6.1:copy \
      -Dartifact="org.jspecify:jspecify:${version}" \
      -DoutputDirectory="$(dirname "${jspecify}")"
  fi
fi
jspecify_reference_checker="${dir}/build/libs/jspecify-reference-checker-0.0.0-SNAPSHOT.jar"
if [ ! -e "${jspecify_reference_checker}" ]; then
  echo "Assembling jspecify-reference-checker"
  ./gradlew assemble
fi

ourclasspath="${jspecify}:${jspecify_reference_checker}"

export CLASSPATH="${ourclasspath}:$CLASSPATH"

$dir/../checker-framework/checker/bin/javac \
  -processorpath "${ourclasspath}" \
  -processor com.google.jspecify.nullness.NullSpecChecker \
  -AcheckImpl \
  -AassumePure \
  -AsuppressWarnings=contracts.conditional.postcondition.false.methodref,contracts.conditional.postcondition.false.override,contracts.conditional.postcondition.true.methodref,contracts.conditional.postcondition.true.override,purity.methodref,purity.overriding,type.anno.before.decl.anno,type.anno.before.modifier \
  "$@"
