import org.gradle.plugins.ide.eclipse.model.Output
import org.gradle.plugins.ide.eclipse.model.SourceFolder

plugins {
    id 'java'
    id 'com.diffplug.spotless' version '6.14.0'
    id 'eclipse'
    // https://github.com/tbroyer/gradle-errorprone-plugin
    id 'net.ltgt.errorprone' version '3.0.1'
}

repositories {
    mavenCentral()
}

configurations {
    errorproneJavac
    conformanceTestAssertions {
        attributes {
            attribute(DocsType.DOCS_TYPE_ATTRIBUTE, objects.named(DocsType, DocsType.SOURCES))
        }
    }
    conformanceTestDeps
}

ext {
    checkerFramework = gradle.includedBuild("checker-framework")
    jspecify = gradle.includedBuild("jspecify")
}

java {
    sourceCompatibility = 1.9
}

dependencies {
    implementation libs.checkerFramework.checker
    implementation libs.checkerFramework.checker.qual
    implementation libs.checkerFramework.framework
    implementation libs.checkerFramework.javacutil

    implementation libs.jspecify

    testImplementation libs.checkerFramework.framework.test
    testImplementation libs.guava
    testImplementation libs.junit
    testImplementation libs.jspecify.conformanceTestFramework
    testRuntimeOnly libs.jsr305 // jsr305 annotations are in some of the samples

    conformanceTestAssertions("org.jspecify.conformance:conformance-tests:0.0.0-SNAPSHOT") {
        capabilities {
            // Depend on the assertion sources
            requireCapability "org.jspecify.conformance:conformance-tests-assertions"
        }
    }

    conformanceTestDeps("org.jspecify.conformance:conformance-tests:0.0.0-SNAPSHOT") {
        capabilities {
            // Depend on the assertion dependencies
            requireCapability "org.jspecify.conformance:conformance-tests-deps"
        }
    }

    errorproneJavac libs.errorProne.javac
    errorprone libs.errorProne.core
}

// Assemble checker-framework when assembling the reference checker.
assemble.dependsOn(checkerFramework.task(":assemble"))
assemble.dependsOn(jspecify.task(":assemble"))

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs.add("-Xlint:all")
    // ErrorProne makes suppressing these easier
    options.compilerArgs.add("-Xlint:-fallthrough")

    options.errorprone.disable("BadImport")

    options.compilerArgs.addAll(
            [
                "api",
                "code",
                "comp",
                "file",
                "main",
                "model",
                "parser",
                "processing",
                "resources",
                "tree",
                "util",
            ]
            .collect { "--add-exports=jdk.compiler/com.sun.tools.javac.$it=ALL-UNNAMED" })
}

tasks.withType(Test).configureEach {
    if (!JavaVersion.current().java9Compatible) {
        jvmArgs "-Xbootclasspath/p:${configurations.errorproneJavac.asPath}"
    }

    // Required because checker-framework uses APIs from these modules.
    jvmArgs(
            [
                "code",
                "comp",
                "main",
                "processing",
                "tree",
                "util",
            ]
            .collect { "--add-opens=jdk.compiler/com.sun.tools.javac.$it=ALL-UNNAMED" })

    testLogging {
        showStackTraces = false
        showStandardStreams = true
        events "failed"
        exceptionFormat "full"
    }
}

test {
    include '**/NullSpecTest$Minimal.class'

    inputs.files("${rootDir}/tests/minimal")
}

tasks.register('jspecifySamplesTest', Test) {
    description = 'Run the checker against the JSpecify samples.'
    group = 'verification'
    include '**/NullSpecTest$Lenient.class'
    include '**/NullSpecTest$Strict.class'

    inputs.files("${jspecify.projectDir}/samples")
}

tasks.register('unzipConformanceTestAssertions', Copy) {
    dependsOn configurations.conformanceTestAssertions
    from zipTree(configurations.conformanceTestAssertions.singleFile)
    into layout.buildDirectory.dir("conformanceTests")
}

tasks.register('conformanceTests', Test) {
    group = 'verification'
    dependsOn 'unzipConformanceTestAssertions', configurations.conformanceTestDeps
    include '**/ConformanceTest.class'

    // Conformance tests
    def conformanceTestsDir = tasks.named('unzipConformanceTestAssertions', Copy).get().destinationDir
    inputs.dir(conformanceTestsDir)
    inputs.files("tests/ConformanceTest-report.txt")
    inputs.files(configurations.conformanceTestDeps)
    systemProperty("JSpecifyConformanceTest.inputs", "$conformanceTestsDir/org/jspecify/conformance/tests")
    systemProperty("JSpecifyConformanceTest.report", "tests/ConformanceTest-report.txt")
    systemProperty("JSpecifyConformanceTest.deps", configurations.conformanceTestDeps.join(":"))

    // Conformance tests run on the samples directory
    inputs.dir("${jspecify.projectDir}/samples")
    inputs.files("tests/ConformanceTestOnSamples-report.txt")
    systemProperty("JSpecifyConformanceTest.samples.inputs", "${jspecify.projectDir}/samples")
    systemProperty("JSpecifyConformanceTest.samples.report", "tests/ConformanceTestOnSamples-report.txt")
}

tasks.named('check').configure {
    dependsOn('conformanceTests')
}

clean.doFirst {
    delete "${rootDir}/tests/build/"
}

/*
 Spotless validates its formatters' dependencies eagerly, on project configuration.
 google-java-format depends on checker-qual, which is built by a subproject.
 On a clean build, the checker-qual JAR file doesn't exist yet, so Spotless throws an error.
 The file doesn't have to be correct; it just has to be a JAR file.
 So here, before the spotless block,  we create a meaningless JAR file at that location if it doesn't already exist.
 See https://github.com/jspecify/jspecify-reference-checker/issues/81
 */

def cfQualJar =
        checkerFramework.projectDir.toPath()
        .resolve("checker-qual/build/libs/checker-qual-${libs.versions.checkerFramework.get()}.jar")

if (!cfQualJar.toFile().exists()) {
    mkdir(cfQualJar.parent)
    exec {
        executable 'jar'
        args = [
            'cf',
            cfQualJar,
            buildFile.path // Use this build script file!
        ]
    }
}

spotless {
    java {
        googleJavaFormat()
        formatAnnotations()
    }
    groovyGradle {
        target '**/*.gradle'
        greclipse()
        indentWithSpaces(4)
        trimTrailingWhitespace()
    }
}

// Use `./gradlew eclipseClasspath` to create Eclipse/VSCode configurations
eclipse.classpath {
    defaultOutputDir = file("build/default")
    file.whenMerged { cp ->
        cp.entries.forEach { cpe ->
            if (cpe instanceof SourceFolder) {
                cpe.output = cpe.output.replace "bin/", "build/classes/java/"
            }
            if (cpe instanceof Output) {
                cpe.path = cpe.path.replace "bin/", "build/"
            }
        }
    }
}
