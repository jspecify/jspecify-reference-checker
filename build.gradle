import org.gradle.plugins.ide.eclipse.model.Output
import org.gradle.plugins.ide.eclipse.model.SourceFolder

plugins {
    id 'java'
    id 'com.diffplug.spotless' version '6.14.0'
    id 'eclipse'
    // https://github.com/tbroyer/gradle-errorprone-plugin
    id 'net.ltgt.errorprone' version '3.0.1'
}

repositories {
    mavenCentral()
}

configurations {
    errorproneJavac
}

ext {
    parentDir = file("${rootDir}/../").absolutePath

    cfHome = "${parentDir}/checker-framework"
    cfVersion = "3.21.5-SNAPSHOT"

    jspecifyHome = "${parentDir}/jspecify"
}

java {
    sourceCompatibility = 1.9
}

dependencies {
    implementation "org.checkerframework:checker:${cfVersion}"
    implementation "org.checkerframework:checker-qual:${cfVersion}"
    implementation "org.checkerframework:framework:${cfVersion}"
    implementation "org.checkerframework:javacutil:${cfVersion}"

    implementation "org.jspecify:jspecify:0.0.0-SNAPSHOT"

    // Testing
    testImplementation 'junit:junit:4.12'
    // The jsr305 dep lets us use its annotations in some of the sample inputs we test against.
    testImplementation 'com.google.code.findbugs:jsr305:3.0.2'
    // The Guava dep lets us test our special handling of some Guava classes.
    testImplementation 'com.google.guava:guava:31.1-jre'
    testImplementation 'org.plumelib:plume-util:1.5.5'
    testImplementation "org.checkerframework:framework-test:${cfVersion}"
    testImplementation "com.google.truth:truth:1.1.3"

    errorproneJavac "com.google.errorprone:javac:9+181-r4173-1"
    errorprone "com.google.errorprone:error_prone_core:2.18.0"
}

tasks.withType(JavaCompile).all {
    options.compilerArgs.add("-Xlint:all")
    // ErrorProne makes suppressing these easier
    options.compilerArgs.add("-Xlint:-fallthrough")

    options.errorprone.disable("BadImport")

    options.compilerArgs.addAll(
            [
                "api",
                "code",
                "comp",
                "file",
                "main",
                "model",
                "parser",
                "processing",
                "resources",
                "tree",
                "util",
            ].collect { """--add-exports=jdk.compiler/com.sun.tools.javac.$it=ALL-UNNAMED""" })
}

tasks.withType(Test) {
    if (!JavaVersion.current().java9Compatible) {
        jvmArgs "-Xbootclasspath/p:${configurations.errorproneJavac.asPath}"
    }

    // Required because checker-framework uses APIs from these modules.
    jvmArgs(
            [
                "code",
                "comp",
                "main",
                "processing",
                "tree",
                "util"
            ]
            .collect { "--add-opens=jdk.compiler/com.sun.tools.javac.$it=ALL-UNNAMED" })

    testLogging {
        showStackTraces = false
        showStandardStreams = true
        events "failed"
        exceptionFormat "full"
    }
}

test {
    include '**/NullSpecTest$Minimal.class'

    inputs.files("${rootDir}/tests/minimal")
}

task jspecifySamplesTest(type: Test) {
    description = 'Run the checker against the JSpecify samples.'
    group = 'verification'
    include '**/NullSpecTest$Lenient.class'
    include '**/NullSpecTest$Strict.class'

    inputs.files("${jspecifyHome}/samples")
}

TaskProvider<Test> conformanceTest(String name, String testDirectory, String reportFile) {
    return tasks.register(name, Test) {
        include '**/ConformanceTest.class'
        inputs.dir(testDirectory)
        inputs.files(reportFile)
        systemProperty("JSpecifyConformanceTest.sourceDirectory", testDirectory)
        systemProperty("JSpecifyConformanceTest.report", reportFile)
    }
}

conformanceTest('conformanceTest', "${jspecifyHome}/conformance", 'tests/ConformanceTest-report.txt')

conformanceTest('conformanceTestOnSamples', "${jspecifyHome}/samples", 'tests/ConformanceTestOnSamples-report.txt')

clean.doFirst {
    delete "${rootDir}/tests/build/"
}

spotless {
    java {
        googleJavaFormat()
        formatAnnotations()
    }
    groovyGradle {
        target '**/*.gradle'
        greclipse()
        indentWithSpaces(4)
        trimTrailingWhitespace()
    }
}

// Use `./gradlew eclipseClasspath` to create Eclipse/VSCode configurations
eclipse.classpath {
    defaultOutputDir = file("build/default")
    file.whenMerged { cp ->
        cp.entries.forEach { cpe ->
            if (cpe instanceof SourceFolder) {
                cpe.output = cpe.output.replace "bin/", "build/classes/java/"
            }
            if (cpe instanceof Output) {
                cpe.path = cpe.path.replace "bin/", "build/"
            }
        }
    }
}
