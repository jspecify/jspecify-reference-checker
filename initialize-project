#!/bin/bash
# Initializes the JSpecify reference checker project by downloading required
# sibling projects.
#
# USAGE
#
#   initialize-project
#
# ENVIRONMENT VARIABLES
#
# Set SHALLOW=1 to clone sibling projects at depth 1.
#
# This script automatically tries to download your fork of
# jspecify/checker-framework, jspecify/jspecify, or jspecify/jdk, if they exist.
# It uses the URL of the origin remote (the default remote created when cloning
# a repo) to determine that.
#
# If that doesn't work, you can set the FORK environment value to the Git URL
# that contains your forks. For example, FORK=git@github.com:myorg means this
# script tries to clone the following before falling back to the JSpecify repos:
#
# git@github:myorg/checker-framework.git
# git@github:myorg/jspecify.git
# git@github:myorg/jdk.git

set -eu

run() {
  printf '%q ' "$@"
  echo
  "$@"
}

forking_org() {
  if [[ -n "${FORK:-}" ]]; then
    echo "${FORK}"
    return
  fi
  dirname "$(git config --default '' --get remote.origin.url)"
}

git_clone() {
  local repo="$1"
  shift

  if [[ -d "../${repo}" ]]; then
    return
  fi

  local git=(git clone)
  if (( "${SHALLOW:-0}" )); then
    git+=(--depth 1 --single-branch)
  fi
  git+=("$@")

  local forking_org
  forking_org="$(forking_org)"
  if [[ -n "${forking_org}" ]]; then
    if run "${git[@]}" "${forking_org}/${repo}.git" "../${repo}"; then
      return
    fi
  fi
  run "${git[@]}" "https://github.com/jspecify/${repo}.git" "../${repo}"
}

git_clone jdk --depth 1 --single-branch

git_clone checker-framework
